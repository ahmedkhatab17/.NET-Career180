// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Lab2.Models;

public partial class CompanyContext : DbContext
{
    public CompanyContext()
    {
    }

    public CompanyContext(DbContextOptions<CompanyContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<Dependent> Dependents { get; set; }

    public virtual DbSet<Dept_Location> Dept_Locations { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<Employee_Project> Employee_Projects { get; set; }

    public virtual DbSet<Project> Projects { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=AHMED-KHATAB\\SQLEXPRESS;Initial Catalog=AssignmentDB02;Integrated Security=True;TrustServerCertificate=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Department>(entity =>
        {
            entity.HasKey(e => e.DeptId).HasName("PK__Departme__014881AE2463B46B");

            entity.ToTable("Department");

            entity.Property(e => e.DeptId).ValueGeneratedNever();
            entity.Property(e => e.DeptName)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.MgrSSNNavigation).WithMany(p => p.Departments)
                .HasForeignKey(d => d.MgrSSN)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Departmen__MgrSS__3C69FB99");
        });

        modelBuilder.Entity<Dependent>(entity =>
        {
            entity.HasKey(e => new { e.ESSN, e.name }).HasName("PK__Dependen__94208D1DA05E7402");

            entity.ToTable("Dependent");

            entity.Property(e => e.name)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.Relationship)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Sex)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.ESSNNavigation).WithMany(p => p.Dependents)
                .HasForeignKey(d => d.ESSN)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Dependent__ESSN__4D94879B");
        });

        modelBuilder.Entity<Dept_Location>(entity =>
        {
            entity.HasKey(e => new { e.DeptId, e.Location }).HasName("PK__Dept_Loc__0F1D521F1F7B3307");

            entity.Property(e => e.Location)
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Dept).WithMany(p => p.Dept_Locations)
                .HasForeignKey(d => d.DeptId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("LocDeptIdFK");
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.HasKey(e => e.SSN).HasName("PK__Employee__CA1E8E3D669F0DC0");

            entity.ToTable("Employee");

            entity.Property(e => e.SSN).ValueGeneratedNever();
            entity.Property(e => e.FName)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Salary).HasColumnType("money");
            entity.Property(e => e.Sex)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.Dept).WithMany(p => p.Employees)
                .HasForeignKey(d => d.DeptId)
                .HasConstraintName("FK__Employee__DeptId__403A8C7D");

            entity.HasOne(d => d.SuperSSNNavigation).WithMany(p => p.InverseSuperSSNNavigation)
                .HasForeignKey(d => d.SuperSSN)
                .HasConstraintName("SupervisorFK");
        });

        modelBuilder.Entity<Employee_Project>(entity =>
        {
            entity.HasKey(e => new { e.ESSN, e.PNO }).HasName("PK__Employee__CF59EC30762DFF23");

            entity.ToTable("Employee_Project");

            entity.HasOne(d => d.ESSNNavigation).WithMany(p => p.Employee_Projects)
                .HasForeignKey(d => d.ESSN)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("ESSNFK");

            entity.HasOne(d => d.PNONavigation).WithMany(p => p.Employee_Projects)
                .HasForeignKey(d => d.PNO)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("PNOFK");
        });

        modelBuilder.Entity<Project>(entity =>
        {
            entity.HasKey(e => e.PId).HasName("PK__Project__C5775540A8FFD8FD");

            entity.ToTable("Project");

            entity.Property(e => e.PId).ValueGeneratedNever();
            entity.Property(e => e.PLocation)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PName)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);

            entity.HasOne(d => d.Dept).WithMany(p => p.Projects)
                .HasForeignKey(d => d.DeptId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("DeptIdFK");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}